import java.sql.Array;

public class Transformer3D{

    //where as the Transform hold the information about the rorientation in space the Transformer3D is a class meant to manipulate vectrs by moving rotating and caling tham

    // it is usually generated by the transform and is the class meant to manipulate vectors according to the Transform in a performant way
    
    //is does this by storing the matrix and the position of the transform and applying it to the vectors

    //in order for the transform not to have to generate a matrix for every vector it wants to manipulate it instead just calculates the matix once stores it in this class in oder for this class to manipulate the vectors instead
    
    
    //how mutch the transfromation matrix stretches every colum
    public Vector3D scale;
    // the matrix used to rotate and scale a given vector
    public Matrix3x3 transform_matrix;

    // the matrix used to just rotate a given vector
    public Matrix3x3 unscaled_transform_matrix;

    //the vector thats stores the position that the transformation takes a vector to
    public Vector3D position;

    public Transformer3D(Matrix3x3 rot_and_scale_matrix, Vector3D pos, Vector3D scale ){
        this.scale = scale.inverse();
        unscaled_transform_matrix = rot_and_scale_matrix.clone();
        unscaled_transform_matrix.scale_matrtix_collums(scale.inverse());
        transform_matrix = rot_and_scale_matrix;
        position = pos;
    }

    public Transformer3D inverse(){
        return new Transformer3D(transform_matrix.inverse(), position.scaled_Vector( -1.0), scale.inverse());
    } 



    public Vector3D get_transformed_vector(Vector3D vector){
        Vector3D a = transform_matrix.transformed_vector(vector);
        a.add(position);
        return a;
      }
    public Vector3D get_inverse_transformed_vector(Vector3D vector){
        Vector3D a = Vector3D.addVectos3Ds(vector, position);
        return transform_matrix.transformed_vector(a);
    }

    public static Transformer3D Identity_Transformer3D(){
        return new Transformer3D(Matrix3x3.identity_matrix(),new Vector3D(0, 0, 0), new Vector3D(1,1,1));
    }

    public String ToString(){
        StringBuilder sb = new StringBuilder();
        sb.append(position.toString());
        sb.append(transform_matrix.toString());
        return sb.toString();
    }

    public void print(){
        System.out.println(transform_matrix.toString());
        System.out.println(position.toString()); 
    }
}
